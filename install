#!/bin/bash

DIR=$(dirname $0)
ARCHDEPS="git curl wget cmake clang ctags python2"
DEBDEPS="curl cmake wget build-essential python-dev ctags"
RPMDEPS="wget curl cmake clang llvm"
ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
VIMDIR=$HOME/.vim
LLVM32=clang+llvm-3.3-i386-debian6.tar.bz2
LLVM64=clang+llvm-3.3-amd64-debian6.tar.bz2
JOBS=`nproc`

case "$1" in
	'--arch')
		ZSHRCFILE=".zshrcarch"
		;;
	'--fed')
		ZSHRCFILE=".zshrcfed"
		;;
	'--deb')
		ZSHRCFILE=".zshrcdeb"
		;;
esac

SetZSHRC() {
	if [ -f $HOME/.zshrc ] ; then
		echo "Copy .zshrc and backup local copy?"
		echo -e "\t1) Backup and copy\n\t2) Copy and replace\n\t3) Skip"
		read ANS
	fi
	if [[ $ANS == '1' ]] ; then
		echo "Copying and backing up .zshrc to .zshrcbak"
		mv $HOME/.zshrc $HOME/.zshrcbak
		cp $DIR/$ZSHRCFILE $HOME/.zshrc
	elif [[ $ANS == '2' ]] ; then
		echo "Copying and replacing"
		cp $DIR/$ZSHRCFILE $HOME/.zshrc
	elif [[ $ANS == '3' ]] ; then
		echo "Skipping..."
	fi
	if [ ! -f $HOME/.zshrc ] ; then
		cp $DIR/$ZSHRCFILE $HOME/.zshrc
	fi
}

InstVim() {
	cp $DIR/.ycm_extra_conf.py $HOME
	cp $DIR/.vimrc $HOME
	mkdir -p $HOME/.zsh
	cp $DIR/git $HOME/.zsh
	cp $DIR/functions $HOME/.zsh

	mkdir -p {$VIMDIR, $VIMDIR/bundle, $VIMDIR/autoload, $VIMDIR/colors}

	echo "Pulling plugins..."
	git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
	curl -LSso $VIMDIR/autoload/pathogen.vim \
		https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim
	cd $VIMDIR/bundle
	git clone git://github.com/tpope/vim-fugitive.git
	git clone https://github.com/scrooloose/nerdtree
	git clone https://github.com/altercation/vim-colors-solarized
	cp $VIMDIR/bundle/vim-colors-solarized/colors/solarized.vim $VIMDIR/colors/
	cd $VIMDIR/bundle
	git clone https://github.com/scrooloose/syntastic
	git clone https://github.com/Valloric/YouCompleteMe
	git clone https://github.com/bling/vim-airline

	mkdir -p $VIMDIR/bundle/ycm_build
}

GetLLVM () {
	cd $VIMDIR/bundle
	if [ $ARCH == '32' ] ; then
		if [ ! -f "$LLVM32" ] ; then
			echo "Downloading LLVM..."
			wget llvm.org/releases/3.3/clang+llvm-3.3-i386-debian6.tar.bz2
			tar -xvf clang+llvm-3.3-i386-debian6.tar.bz2
		fi
		echo "LLVM tar exists."
	else [ $ARCH == '64' ]
		if [ ! -f "$LLVM64" ] ; then
			echo "Downloading LLVM..."
			wget llvm.org/releases/3.3/clang+llvm-3.3-amd64-debian6.tar.bz2
			tar -xvf clang+llvm-3.3-amd64-debian6.tar.bz2
		fi
		echo "LLVM tar exists."
	fi
	return 0
}

BuildYCM () {
	cd $VIMDIR/bundle/YouCompleteMe
	git submodule update --init --recursive
	cd $VIMDIR/bundle/ycm_build
	if [ $ARCH == '32' ] ; then
		cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=$VIMDIR/bundle/clang+llvm-3.3-i386-debian6 . $VIMDIR/bundle/YouCompleteMe/third_party/ycmd/cpp
	else [ $ARCH == '64' ]
		cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=$VIMDIR/bundle/clang+llvm-3.3-amd64-debian6 . $VIMDIR/bundle/YouCompleteMe/third_party/ycmd/cpp
	fi
	make ycm_core -j$JOBS
	make -j$JOBS
}

AltBuildYCM () {
	cd $VIMDIR/bundle/YouCompleteMe
	git submodule update --init --recursive
	cd $VIMDIR/bundle/ycm_build
	cmake -G "Unix Makefiles" -DUSE_SYSTEM_LIBCLANG=ON . $VIMDIR/bundle/YouCompleteMe/third_party/ycmd/cpp
	make ycm_support_libs -j$JOBS
	make -j$JOBS
}

ArchDeps() {
	echo "Checking dependencies"
	TGT=$(pacman -T $ARCHDEPS)
	sudo pacman -S $TGT
	AltBuildYCM
}

DebDeps() {
	dpkg -s $DEBDEPS >/dev/null 2>&1
	if [ "$?" -ne "0" ] ; then
		echo "$DEBDEPS not installed, installing now"
		sudo apt-get install -y $DEBDEPS
	else
		echo "Dependencies met."
	fi
	GetLLVM
	BuildYCM
}

FedDeps() {
	sudo yum groupinstall "Development Tools" "Development Libraries" -y
	sudo yum install $RPMDEPS -y
	AltBuildYCM
}

error() {
	echo "$1"
	exit 1
}

usage() {
	echo -e "usage: install [option]\n"
	echo -e "Options:"
	echo -e "\t--arch\tInstall Arch dotfiles"
	echo -e "\t--deb\tInstall Debian dotfiles"
	echo -e "\t--fed\tInstall Fedora dotfiles"
	echo -e "\t--help\tDisplay this"
	exit
}

case "$1" in
	'--arch')
		SetZSHRC
		InstVim
		ArchDeps
		;;
	'--deb')
		SetZSHRC
		InstVim
		DebDeps
		;;
	'--fed')
		SetZSHRC
		InstVim
		FedDeps
		;;
	''|'-h'|'--help')
		usage
		;;
	*)
		error "Unrecognized option \`$1', see install --help"
		;;
esac
